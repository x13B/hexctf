// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// NOTE: USE PascalCase for model name and camelCase for field names!

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // url      = env("DATABASE_URL")
  url = "file:hexctf/prisma/hexctfDatabase.db"
}

// schema.prisma
model User {
  id       String  @id @unique
  username String  @unique
  isAdmin  Boolean @default(false)
  results  QuizResults[] @relation("UserToResults")
  team TeamMembers? @relation("TeamToUsers")
  auth_session Session[]
  key          Key[]
}

// For Lucia
model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Teams {
  teamId   Int          @id @default(autoincrement())
  teamName String       @unique
  points Int            @default(0)
  answers  AnswerQuestions[] @relation("TeamToAnswer")
  teams Leaderboard? @relation("TeamToLeaderboard")
  members TeamMembers[] @relation("TeamToMembers")
  assigned AssignedQuestions[] @relation("TeamToQuestion")

}

model TeamMembers {
  teamId Int 
  userId String @unique
  team Teams @relation("TeamToMembers", fields: [teamId], references: [teamId])
  user User @relation("TeamToUsers", fields: [userId], references: [id])
  @@unique([teamId, userId])

}

model Leaderboard {
  teamId  Int    @id
  teams   Teams  @relation("TeamToLeaderboard", fields: [teamId], references: [teamId])
}

model Categories {
  categoryId   Int    @id @default(autoincrement())
  categoryName String @unique
  questions Questions[] @relation("CategoryToQuestion")
}

model Questions {
  questionId  Int    @id @default(autoincrement())
  title       String
  description String
  hint        String
  hint2       String @default("")
  hint3       String @default("")
  answer      String
  points      Int
  categoryId  Int 
  difficulty  String
  categories  Categories @relation("CategoryToQuestion", fields: [categoryId], references: [categoryId])
  answers     AnswerQuestions[] @relation("QuestionToAnswer")
  assigned    AssignedQuestions[] @relation("QuestionToTeam")
}

model AnswerQuestions {
  questionId Int 
  teamId     Int
  questions  Questions @relation("QuestionToAnswer", fields: [questionId], references: [questionId])
  teams      Teams     @relation("TeamToAnswer", fields: [teamId], references: [teamId])
  @@unique([questionId, teamId])
}

model AssignedQuestions {
  questionId Int
  teamId     Int
  question Questions @relation("QuestionToTeam", fields: [questionId], references: [questionId])
  team Teams @relation("TeamToQuestion", fields: [teamId], references: [teamId])
  @@unique([teamId, questionId])
}

model Quiz {
  quizId   Int     @id @default(autoincrement())
  quizName String  @unique
  results  QuizResults[] @relation("QuizToResults")
}

model QuizQuestions {
  quizQuestionsId Int @id @default(autoincrement())
  questionBody    String
  questionAnswer  String
  hint            String
  category        String
  questionValue   Int @default(0)
}

model QuizResults {
  quizId Int 
  userId String
  score  Int @default(-1)
  quiz   Quiz @relation("QuizToResults", fields: [quizId], references: [quizId])
  user   User @relation("UserToResults", fields: [userId], references: [id])
  @@unique([quizId, userId])
}

model Competition {
  competitionId   Int @id @default(1)
  competitionName String
  startDate       String
  endDate         String
}